---
- hosts: k8s-cluster
  any_errors_fatal: true
  gather_facts: false

  vars_files:
    - become-pass.yml

  tasks:
    - name: Bootstrap | Check if bootstrap is needed
      raw: which "{{ item }}"
      register: need_bootstrap
      failed_when: false
      changed_when: false
      with_items:
        - python
        - pip
        - dbus-daemon
      tags:
        - facts
    
    - name: Bootstrap | Install python 2.x and pip
      raw:
        apt-get update && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y python-minimal python-pip dbus
      when:
        "{{ need_bootstrap.results | map(attribute='rc') | sort | last | bool }}"

- hosts: kube-node
  any_errors_fatal: true
  gather_facts: true
  vars_files:
    - become-pass.yml

  vars:
    docker_version: 1.13
    docker_local_pkg_info:
      - name: "docker-engine_1.13.1-0~ubuntu-{{ ansible_distribution_release|lower }}_amd64.deb"
    # https://apt.dockerproject.org/repo/dists/ubuntu-xenial/main/filelist
    docker_versioned_pkg:
      '1.13': docker-engine=1.13.1-0~ubuntu-{{ ansible_distribution_release|lower }}
    
    docker_package_info:
      pkg_mgr: apt
      pkgs:
        - name: "{{ docker_versioned_pkg[docker_version | string] }}"
          force: yes

    docker_apt_repo_base_url: 'https://apt.dockerproject.org/repo'

    docker_apt_repo_gpgkey: 'https://apt.dockerproject.org/gpg'
    
    docker_repo_key_info:
      pkg_key: apt_key
      url: '{{ docker_apt_repo_gpgkey }}'
      repo_keys:
        - 58118E89F3A912897C070ADBF76221572C52609D
    
    docker_repo_info:
      pkg_repo: apt_repository
      repos:
        - >
           deb {{ docker_apt_repo_base_url }}
           {{ ansible_distribution|lower }}-{{ ansible_distribution_release|lower }}
           main
  tasks: 
    - name: Install pkg(build essential wget)
      apt:
        name: "{{ item }}"
        update_cache: yes
      with_items:
        - build-essential
        - wget

    - name: Download nvidia cuda
      get_url:
        url: https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda-repo-ubuntu1604-9-1-local_9.1.85-1_amd64
        dest: /tmp/cuda-repo-ubuntu1604-9-1-local_9.1.85-1_amd64.deb
      register: cuda_download_info

    - name: Cuda repo info Installation
      apt:
        deb: "{{ cuda_download_info.dest }}"

    - name: Check the cuda repo pub key
      find:
        path: /var/cuda-repo-9-1-local
        patterns: '*.pub'
      register: pubfile

    - name: set key file
      set_fact:
        cuda_pub: "{{ pubfile.files[0].path }}"
    
    - name: add key
      apt_key: 
        file: "{{ cuda_pub }}"
        #file: "{{ lookup('pipe', 'ls /var/cuda-repo-9-1-local/*.pub') }}"
        state: present
      delay: 1

    - name: Install cuda
      apt:
        name: cuda 
        update_cache: yes

    - name: add the package repo
      apt_key:
        url: https://nvidia.github.io/nvidia-docker/gpgkey
        state: present 
  
    - name: get nvidia docker source list
      get_url: 
        url: https://nvidia.github.io/nvidia-docker/ubuntu16.04/amd64/nvidia-docker.list
        dest: /etc/apt/sources.list.d/nvidia-docker.list
      notify: repo update 
    
    - name: ensure docker repository public key is installed
      action: "{{ docker_repo_key_info.pkg_key }}"
      args: 
        id: "{{item}}"
        url: "{{docker_repo_key_info.url}}"
        state: present
      register: keyserver_task_result
      until: keyserver_task_result|succeeded
      retries: 4
      delay: 3
      with_items: "{{ docker_repo_key_info.repo_keys }}"

    - name: ensure docker repository is enabled
      action: "{{ docker_repo_info.pkg_repo }}"
      args:
        repo: "{{item}}"
        state: present
      with_items: "{{ docker_repo_info.repos }}"
      when: docker_repo_info.repos|length > 0

    - name: ensure docker packages are installed
      action: "{{ docker_package_info.pkg_mgr }}"
      args:
        pkg: "{{item.name}}"
        force: "{{item.force|default(omit)}}"
        state: present
      register: docker_task_result
      until: docker_task_result|succeeded
      retries: 4
      delay: 3
      with_items: "{{ docker_package_info.pkgs }}"
      notify: restart docker
      when: docker_package_info.pkgs|length > 0

    - name: Install nvidia-docker2
      apt:
        name: "{{ item.name }}={{ item.release }}"
        update_cache: yes
        state: present 
      with_items:
        - { name: nvidia-docker2, release: 2.0.2+docker1.13.1-1 }
        - { name: nvidia-container-runtime, release: 1.1.1+docker1.13.1-1 }
      notify: restart docker

    - name: change docker daemon.json 
      template:
        src: ./docker_daemon.json.j2
        dest: /etc/docker/daemon.json
        mode: 0644
        backup: yes
      notify: restart docker
      tags: config
  
  handlers:
    - name: restart docker
      systemd: 
        name: docker.service
        daemon_reload: yes
        state: restarted

    - name: repo update
      apt:
        update_cache: yes

